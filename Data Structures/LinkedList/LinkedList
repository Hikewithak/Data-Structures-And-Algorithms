import java.util.LinkedList;
//Generic LInked List
public class LinkedListLL<T> {
    public int data;
    Node<T> head;
//Node for LinkedList.
    public class Node<T> {
        ;
        T data;
        Node<T> next;

        Node(T data) {
            this.data = data;
            this.next = null;
        }
    }
    
//Method for add first Node.
    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data);
        if (this.head == null) {
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;

    }
//Method For PrintList..
    public void printList() {
        if (this.head == null) {
            System.out.print("List is Empty");
        }
        Node<T> currentNode = head;
        while (currentNode != null) {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        }
        System.out.println();
    }
//Method for AddLast Node
    public void addLast(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node<T> lastNode = head;
        while (lastNode.next != null) {
            lastNode = lastNode.next;
        }
        lastNode.next = newNode;
    }
//Method for print Length of Linked List
    public int getLength() {
        int length = 0;
        Node<T> count = head;
        while (count != null) {
            length++;
            count = count.next;
        }
        return length;
    }
//Method for InsertNode At any position
    public void insertNode(T data, int pos) {
        if (head == null && pos != 0) {
            return;
        }
        Node<T> newNode = new Node<>(data);
        if (pos == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node<T> temp = head;
        for (int i = 1; i < pos && temp != null; i++) {
            temp = temp.next;
        }
        if (temp != null) {
            Node<T> tempNext = temp.next;
            temp.next = newNode;
            newNode.next = tempNext;
        }
    }
    //Method for find Node Data at given position
   public void findDataAtPos(int pos){
        if (head==null){
            return;
        }
        Node<T> temp = head;
        for (int i=0;i<pos && temp!=null;i++){
            temp = temp.next;
        }
        System.out.println(temp.data);
   }
   
   //Method For NthOccurrence
   public void nthOccurrence(T data){
        if (head==null){
            return;
        }
        Node<T> temp = head;
        int count=0;
        while (temp.data!=data){
            count++;
            temp = temp.next;
        }
        System.out.println(count);
   }
//Method For Delete first Node
    public void deleteFirst(T data) {
        if (head == null) {
            System.out.println("List is Already empty");
            return;
        }
        head = head.next;
    }
//Method for DeleteLast Node.
    public void deleteLast() {
        if (head == null) {
            System.out.println("List is Empty");
            return;
        }
        if (head.next == null) {
            head = null;
            return;
        }
        Node<T> firstNode = head;
        Node<T> secondNode = head.next;
        while (secondNode.next != null) {
            firstNode = firstNode.next;
            secondNode = secondNode.next;
        }
        firstNode.next = null;
    }
//Method For Delete Ith Node.
    public void deleteIthNode(int pos) {
        if (head == null && pos != 0) {
            return;
        }
        if (pos == 0) {
            head = head.next;
            return;
        }
        Node<T> temp = head;
        for (int i = 1; i < pos && temp != null; i++) {
            temp = temp.next;
        }
        if (temp != null) {
            temp.next = temp.next.next;
        }
    }
//Method for reverse Linked List.
    public void reverseLinkList() {
        if (head == null || head.next == null) {
            return;
        }
        Node firstNode = head;
        Node middleNode = head.next;
        while (middleNode != null) {
            Node nextNode = middleNode.next;
            middleNode.next = firstNode;

            //Updates

            firstNode = middleNode;
            middleNode = nextNode;
        }
        head.next = null;
        head = firstNode;
    }
    //Method for Delete every N Node.
    public void deleteEveryNNode(int m,int n){
        if (m==0){
            return;
        }
        if (n==0){
            return;
        }
        Node<T> temp = head,deletedNode = null;
        while (temp!=null){
            for(int i=0;i<m-1 && temp!=null;i++){
                temp=temp.next;
            }
            if (temp==null){
                break;
            }
            deletedNode = temp.next;
            for (int i=0;i<n && deletedNode!=null;i++){
                deletedNode = deletedNode.next;
            }
            temp.next=deletedNode;
            temp=deletedNode;
        }
    }
    
}
