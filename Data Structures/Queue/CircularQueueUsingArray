public class CircularQueue {
    static class Queue {
        private static int arr[];
        static int size;
        static int rear = -1;
        static int front = -1;
// constructor for initialising Array Size

        Queue(int size) {
            arr = new int[size];
            this.size = size;
        }
//Method for Checking Queue is Empty
        public static boolean isEmpty() {
            return rear == -1 && front == -1;
        }
//Method For Checking Queue Is Full Or Not..
        public static boolean isFull() {
            return (rear + 1) % size == front;
        }
//Method For Adding Element in the Queue..
        public static void add(int data) {
            if (isFull()) {
                System.out.println("full Queue");
                return;
            }
  //Here We Make Front update -1 to 0       
            if (front == -1) {
                front = 0;
            }
   /**
   Rear initial Value is -1 and The -1+1=0 and the initial size of the Queue is 0 so when 0%0=0 and update with 1 to the rear..
   **/
            rear = (rear + 1) % size;
            arr[rear] = data;
        }
//Method For removing Element..
        public static int remove() {
            if (isEmpty()) {
                System.out.println("empty queue");
                return -1;
            }
            int result = arr[front];
            if (rear == front) {
                rear = front = -1;
            } else {
                front = (front + 1) % size;
            }
            return result;
        }
//Method For peek elements..
        public static int peek() {
            if (isEmpty()) {
                System.out.println("Empty Queue");
                return -1;
            }
            return arr[front];
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue(5);
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);
        q.remove();
        q.add(6);

        while (!q.isEmpty()) {
            System.out.println(q.peek());
            q.remove();
        }
    }
}
