import java.util.LinkedList;
import java.util.Queue;

public class StacksUsingQueues {
   static class Stack {
        private Queue<Integer> q1;
        private Queue<Integer> q2;
        int size = 0;

        public Stack() {
            q1 = new LinkedList<Integer>();
            q2 = new LinkedList<Integer>();
            size = 0;
        }

        public int getSize() {
            return size;
        }

        public boolean isEmpty() {
            return size == 0;
        }

        public void push(int element) {
            q1.add(element);
            size = size + 1;
        }

        public int pop() {
            if (q1.isEmpty()) {
                return -1;
            }
            while (q1.size() != 1) {
                q2.add(q1.remove());
            }
            int top = q1.remove();
            while (!q2.isEmpty()) {
                q1.add(q2.remove());
            }
            size = size - 1;
            return top;
        }

        public int top() {
            //Implement the top() function
            if (q1.isEmpty()) {
                return -1;
            }
            while (q1.size() != 1) {
                q2.add(q1.remove());
            }
            int top = q1.peek();
            q2.add(q1.remove());

            Queue<Integer> q = q1;
            q1 = q2;
            q2 = q;
            return top;
        }
    }
    public static void main(String[]args){
        Stack st = new Stack();
        st.push(1);
        st.push(2);
        st.push(3);
        st.push(4);
        while(!st.isEmpty()){
            System.out.println(st.top());
            st.pop();
        }
    }
}
